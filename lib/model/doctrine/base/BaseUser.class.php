<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $nick_name
 * @property string $email
 * @property string $password
 * @property string $password_hash
 * @property string $salt
 * @property string $reset_password_hash
 * @property integer $reset_expire_at
 * @property string $register_hash
 * @property integer $last_signin_at
 * @property enum $status
 * @property integer $campus_id
 * @property integer $city_id
 * @property Campus $Campus
 * @property City $City
 * @property Doctrine_Collection $UserListings
 * @property Doctrine_Collection $UserComments
 * @property Doctrine_Collection $UserImages
 * 
 * @method string              getNickName()            Returns the current record's "nick_name" value
 * @method string              getEmail()               Returns the current record's "email" value
 * @method string              getPassword()            Returns the current record's "password" value
 * @method string              getPasswordHash()        Returns the current record's "password_hash" value
 * @method string              getSalt()                Returns the current record's "salt" value
 * @method string              getResetPasswordHash()   Returns the current record's "reset_password_hash" value
 * @method integer             getResetExpireAt()       Returns the current record's "reset_expire_at" value
 * @method string              getRegisterHash()        Returns the current record's "register_hash" value
 * @method integer             getLastSigninAt()        Returns the current record's "last_signin_at" value
 * @method enum                getStatus()              Returns the current record's "status" value
 * @method integer             getCampusId()            Returns the current record's "campus_id" value
 * @method integer             getCityId()              Returns the current record's "city_id" value
 * @method Campus              getCampus()              Returns the current record's "Campus" value
 * @method City                getCity()                Returns the current record's "City" value
 * @method Doctrine_Collection getUserListings()        Returns the current record's "UserListings" collection
 * @method Doctrine_Collection getUserComments()        Returns the current record's "UserComments" collection
 * @method Doctrine_Collection getUserImages()          Returns the current record's "UserImages" collection
 * @method User                setNickName()            Sets the current record's "nick_name" value
 * @method User                setEmail()               Sets the current record's "email" value
 * @method User                setPassword()            Sets the current record's "password" value
 * @method User                setPasswordHash()        Sets the current record's "password_hash" value
 * @method User                setSalt()                Sets the current record's "salt" value
 * @method User                setResetPasswordHash()   Sets the current record's "reset_password_hash" value
 * @method User                setResetExpireAt()       Sets the current record's "reset_expire_at" value
 * @method User                setRegisterHash()        Sets the current record's "register_hash" value
 * @method User                setLastSigninAt()        Sets the current record's "last_signin_at" value
 * @method User                setStatus()              Sets the current record's "status" value
 * @method User                setCampusId()            Sets the current record's "campus_id" value
 * @method User                setCityId()              Sets the current record's "city_id" value
 * @method User                setCampus()              Sets the current record's "Campus" value
 * @method User                setCity()                Sets the current record's "City" value
 * @method User                setUserListings()        Sets the current record's "UserListings" collection
 * @method User                setUserComments()        Sets the current record's "UserComments" collection
 * @method User                setUserImages()          Sets the current record's "UserImages" collection
 * 
 * @package    campuscenter
 * @subpackage model
 * @author     David Lin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('nick_name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 12, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 12,
             ));
        $this->hasColumn('password_hash', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 40,
             ));
        $this->hasColumn('salt', 'string', 32, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 32,
             ));
        $this->hasColumn('reset_password_hash', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 40,
             ));
        $this->hasColumn('reset_expire_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => '0',
             ));
        $this->hasColumn('register_hash', 'string', 32, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 32,
             ));
        $this->hasColumn('last_signin_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => '0',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'new',
              1 => 'live',
              2 => 'suspended',
             ),
             ));
        $this->hasColumn('campus_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('city_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Campus', array(
             'local' => 'campus_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('City', array(
             'local' => 'city_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Listing as UserListings', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Comment as UserComments', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Image as UserImages', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}