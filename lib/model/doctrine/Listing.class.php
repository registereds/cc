<?php

/**
 * Listing
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    campuscenter
 * @subpackage model
 * @author     David Lin
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Listing extends BaseListing {


        const STATUS_DELETED = 'deleted';        
        const STATUS_ACTIVE = 'active';
        const STATUS_INACTIVE = 'inactive';
        

        const MODULE_MARKETPLACE = 'marketplace';
        const MODULE_EVENTS = 'events';
        const MODULE_FORUM = 'forum';



	
	/**
	 * update searchable fields for indexing, i.e. category_slug
         * update listing status
	 *
	 * @param unknown_type $event
	 */
	public function preSave($event) {
		parent::preSave($event);
		
		$needSaveAgain = false;

                $category = $this->getCategory();
		$newName = is_null ($category) ? "" :$category['name'];
		$newSlug = $this->slugify($newName);
		if ($this ['category_slug'] != $newSlug) {
			$this ['category_slug'] = $newSlug;
		}
		
		$campus = $this->getCampus();
		$newName = is_null ($campus ) ? "" : $campus ['name'];
		$newSlug = $this->slugify($newName);
		if ($this ['campus_slug'] != $newSlug) {
			$this ['campus_slug'] = $newSlug;			
		}


                //get new status                
                if($this['created_at'] > 0){
                    $newStatus = Listing::STATUS_DELETED;
                }else if($this['expires_at'] >= date('Y-m-d H:i:s', time()) || $this['audit_status'] < 0){
                    $newStatus = Listing::STATUS_INACTIVE;
                }else{
                    $newStatus = Listing::STATUS_ACTIVE;
                }

                if($this['status'] != $newStatus){
                    $this['status'] = $newStatus;                  
                }
	
	}
	
	/**
	 * Slugify text, this is used in postSave() where category_slug is created when saving
	 *
	 * @param string $text
	 * @return string
	 */
	private function slugify($text) {
		// replace non letter or digits by - 
		$text = preg_replace ( '~[^\\pL\d]+~u', '-', $text );
		// trim 
		$text = trim ( $text, '-' );
		// lowercase 
		$text = strtolower ( $text );
		// remove unwanted characters 
		$text = preg_replace ( '~[^-\w]+~', '', $text );
		return $text;
	
	}
	
	/**
	 * return HTML <a> element for template use.
	 * Note: need to html decode in the template.
	 *
	 * @param array $option
	 * @return string
	 */
	public function getHTMLAnchor( $option=array() ){
                
		return link_to($this['name'], 'listing', array( 'sf_subject' => $this, 'module'=>$this->getModule()), $option);
	}
	
	/**
	 * return URL for this listing
	 *
	 * @param sfContext $sf_context
	 * @param boolean $absolute
	 * @return string
	 */
	public function getURL($absolute=true){
		$url = sfContext::getInstance()->getController()->genUrl(array('sf_route'=>'listing', 'sf_subject' => $this, 'module'=>$this->getModule()), $absolute);
          
                return $url;
	}


        /**
         * return the Anchored image thumb for this listing
         */
        public function getAnchoredThumb(){
            $images = $this->getListingImages();
            if(count($images) > 0){
          
                return '<a href="'.$this->getURL().'"><img alt="No-Photo" class="screenshotThumb"  src="'.$images[0]['url'].'"></a>';

            }else{
                return '<a href="'.$this->getURL().'"><img alt="No-Photo" class="screenshotThumb" src=""></a>';
            }

        }

        public function getImageCount(){
            return count($this->getListingImages());

        }


	
	/**
	 * Increase view count for the current listing
	 *
	 */
	public function addViewCount(){
		
		$q = Doctrine_Query::create()
			->update('Listing') ->set('count_view', 'count_view + 1') ->where('id = '.$this->getId());
		$q->execute();	
	}




        /**
         * Increase the association between a keyword and a listing by duplicating a row in the listing index table
         * @param string $keyword
         */
        public function addKeywordIndex($keyword){
            $keyword = strtolower(trim($keyword));
            $keyword = preg_replace('@\s+@', ' ', $keyword);
            $keyword = preg_replace('@\W@', ' ', $keyword);
            $keywords = explode(' ', $keyword);

            foreach($keywords as $kw){
               try{
                $obj = new ListingIndex();
                $obj->keyword = $kw;
                $obj->field = 'search';
                $obj->id = $this->getId();
                $obj->position = time();
                $obj->save();
                
               }catch(PDOException $e){
                   //do nothing;
                   //in case of two user trying to add at the same time, just ignor one of them
               }
            }

            
        }



	/**
	 * Return sorted list of comments for this listing. Comments are sorted so that hirachy structure maintains
	 *
	 * @return unknown
	 */
	public function getSortedComments(){
	   $cms = $this['ListingComments'];
	   $comments = array();
	   foreach ($cms as $c){
	   		$comments[] = $c;
	   }
	   
	   $cFunc = create_function('$a,$b', ' if ($a->getParentId()==0 && $b->getParentId() ==0 || $a->getParentId()>0 && $b->getParentId() >0){ return $a["created_at"]<$b["created_at"] ? 1: $a["created_at"]>$b["created_at"]? 1: 0; }else{ return $a->getParentId()==0?-1:1;}');
		usort($comments, $cFunc);
		return $comments;
	}



	
	
}
